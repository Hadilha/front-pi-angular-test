import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { environment } from 'src/environments/environment';
import { Observable } from 'rxjs';

export interface Calendar {
  calendarId?: number; // Optional during creation, generated by backend
  owner: {
    userId: number;
  }; // ID of the professional owning the calendar
  events?: { [key: string]: string }; // Map of date-time (ISO 8601) to event descriptions
}

@Injectable({
  providedIn: 'root'
})
export class CalendarService {
  private baseUrl = `${environment.apiUrl}/calendars`; // e.g., http://localhost:8089/api/calendars

  constructor(private http: HttpClient) {}

  /** Creates a new calendar */
  createCalendar(calendar: Calendar): Observable<Calendar> {
    return this.http.post<Calendar>(this.baseUrl, calendar);
  }

  /** Retrieves all calendars */
  /*getCalendars(): Observable<Calendar[]> {
    return this.http.get<Calendar[]>(this.baseUrl);
  }*/

  getCalendars(paginated: boolean = false, page: number = 0, size: number = 5): Observable<any> {
      let params = new HttpParams();
      
      if (paginated) {
        params = params.set('paginated', 'true');
        params = params.set('page', page.toString());
        params = params.set('size', size.toString());
      }
      
      return this.http.get<any>(this.baseUrl, { params });
    }
  

  /** Retrieves a calendar by its ID */
  getCalendarById(id: number): Observable<Calendar> {
    return this.http.get<Calendar>(`${this.baseUrl}/${id}`);
  }

  /** Updates an existing calendar */
  updateCalendar(calendar: Calendar): Observable<Calendar> {
    return this.http.put<Calendar>(`${this.baseUrl}/${calendar.calendarId}`, calendar);
  }

  /** Deletes a calendar by its ID */
  deleteCalendar(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/${id}`);
  }

  /** Retrieves calendars for a specific professional */
  getCalendarsByProfessionalId(professionalId: number): Observable<Calendar[]> {
    return this.http.get<Calendar[]>(`${this.baseUrl}?professionalId=${professionalId}`);
  }

  getCalendarsByPatientId(patientId: number): Observable<Calendar[]> {
    return this.http.get<any[]>(`${this.baseUrl}/patient/${patientId}`);
  }
  
  // Get doctor's available slots (for booking)
  getDoctorAvailability(doctorId: number, date: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/professional/${doctorId}/availability`, {
      params: { date }
    });
  }
}